"""
Snakefile for running DFE benchmark on stdpopsim.
"""

import os
import numpy as np
import stdpopsim

configfile: "workflows/config/snakemake/tiny_config.yaml"

np.random.seed(config["seed"])

# ###############################################################################
# GENERAL RULES & GLOBALS
# ###############################################################################

# The number of replicates of each analysis you would like to run
replicates = config["replicates"]
# Where you would like all output files from analysis to live
output_dir = os.path.abspath(config["output_dir"])

# The analysis species
species = stdpopsim.get_species(config["species"])


# The names of all chromosomes to simulate, separated by commas
# Use "all" to simulate all chromsomes for the genome
chrm_list = [chrom.id for chrom in species.genome.chromosomes]
if "chrY" in chrm_list:
    chrm_list.remove("chrY")
if(config["chrm_list"] != "all"):
    chrm_list = [chr for chr in config["chrm_list"].split(",")]

seed_array = np.random.random_integers(1,2**31,replicates)

# The specific demographic model you would like to run
demo_model_array =  config["demo_models"]
demo_sample_size_dict = {}
for x in demo_model_array:
    demo_sample_size_dict[x["id"]] = x["num_samples_per_population"]
demo_model_ids = [x["id"] for x in demo_model_array] 
# Select DFE model from catalog  
dfe_list = config["dfe_list"]
annotation_list = config["annotation_list"]

# ###############################################################################
# GENERAL RULES & GLOBALS
# ###############################################################################
rule all:
    input:
        expand(
            [output_dir + "/simulated_data/{{demog}}/{dfes}/{annots}/{{seeds}}/sim_{{chrms}}.trees".format(
                dfes=DFE, annots=ANNOT) for (DFE, ANNOT) in zip(dfe_list, annotation_list)],
            demog=demo_model_ids,
            seeds=seed_array,
            chrms=chrm_list,
        ),

rule simulation:
    input:
    output:
        output_dir + "/simulated_data/{demog}/{dfes}/{annots}/{seeds}/sim_{chrms}.trees"
    resources: 
        time = lambda wildcards, attempt: attempt * 6000, 
        mem_mb = lambda wildcards, attempt: attempt * 100000
    run:
        if wildcards.demog == 'Constant': 
            model = stdpopsim.PiecewiseConstantSize(species.population_size)
            mutation_rate = species.genome.mean_mutation_rate
        else: 
            model = species.get_demographic_model(wildcards.demog)
            mutation_rate = model.mutation_rate
            if mutation_rate is None:
                mutation_rate = species.genome.mean_mutation_rate

        samples = {f"{model.populations[i].name}": m for i, m in enumerate(demo_sample_size_dict[wildcards.demog])}
        genetic_map_id = config["genetic_map"]
        contig = species.get_contig(wildcards.chrms, genetic_map=genetic_map_id)
        if wildcards.dfes != "none":
            # Load dfe only if provided
            dfe = species.get_dfe(wildcards.dfes)
            if wildcards.annots == "all_sites":
                # Adding selection to the whole contig
                contig.add_dfe(intervals=np.array([[0, int(contig.length)]]), DFE=dfe)
            else:
            ## Adding annotation only seletion on exon region
                annot = species.get_annotations(wildcards.annots)
                annot_intervals = annot.get_chromosome_annotations(wildcards.chrms)
                contig.add_dfe(intervals=annot_intervals, DFE=dfe)
        
        contig.mutation_rate = mutation_rate
        engine = stdpopsim.get_engine("slim")
        ts = engine.simulate(
            model,
            contig,
            samples,
            slim_scaling_factor=config["slim_scaling_factor"],
            slim_burn_in=config["slim_burn_in"],
            seed=wildcards.seeds,
        )
        ts.dump(output[0])
