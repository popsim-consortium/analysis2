"""
Snakefile for running DFE benchmark on stdpopsim.
"""

import os
import numpy as np
import stdpopsim
import tskit
import ts2fs
import plots

configfile: "workflows/config/snakemake/config.yaml"


np.random.seed(config["seed"])

# ###############################################################################
# GENERAL RULES & GLOBALS
# ###############################################################################

# The number of replicates of each analysis you would like to run
replicates = config["replicates"]

# Where you would like all output files from analysis to live
output_dir = os.path.abspath(config["output_dir"])

# The analysis species
species = stdpopsim.get_species(config["species"])



# The names of all chromosomes to simulate, separated by commas
# Use "all" to simulate all chromsomes for the genome
chrm_list = [chrom.id for chrom in species.genome.chromosomes]
if "chrY" in chrm_list:
    chrm_list.remove("chrY")
if(config["chrm_list"] != "all"):
    chrm_list = [chr for chr in config["chrm_list"].split(",")]

seed_array = np.random.random_integers(1,2**31,replicates)

# polyDFE
poly_dfe_exec = os.path.abspath(config["poly_dfe_exec"])

# The specific demographic model you would like to run
demo_model_array =  config["demo_models"]
demo_model_id_list = [x["id"] for x in demo_model_array] 
demo_sample_size_dict = {}
for x in demo_model_array:
    demo_sample_size_dict[x["id"]] = x["num_samples_per_population"]

# Select DFE model from catalog  
dfe_list = config["dfe_list"]   
annotation_list = config["annotation_list"]

rule all:
    input: 
        #expand(output_dir + "/inference/OutOfAfrica_3G09/polyDFE/{chrms}/pop{ids}.polyDFE.bestfits", chrms=chrm_list, ids=[0, 1, 2])
        expand(output_dir + "/plots/{demog}/{chrms}/{dfes}/{annots}/dfe.inference.benchmark.pdf",
            chrms=chrm_list,
            demog=demo_model_id_list,
            dfes=dfe_list,
            annots=annotation_list )

# ###############################################################################
# dadi
# ###############################################################################

#demo_model = 'two_epoch'
#demo_p0 = '5 5'
#demo_lbounds = '10e-3 10e-3' 
#demo_ubounds = '100 1'
#dfe_model = 'gamma'
#dfe_p0 = '0.5 1000'
#dfe_lbounds = '0 0'
#dfe_ubounds = '1 50000'

#rule generate_dadi_fs:
#    input:
#        output_dir + "/simulated_data/OutOfAfrica/{seeds}/sim_OutOfAfrica_3G09_HuberDFE_{chrms}.trees"
#        rules.simulation.output
#    output:
#        output_dir + "/dadi/{seeds}/{chrms}/pop{ids}/pop{ids}.neu.fs",
#        output_dir + "/dadi/{seeds}/{chrms}/pop{ids}/pop{ids}.nonneu.fs"
#    threads: 1
#    resources: time_min=60, mem_mb=5000, cpus=1
#    run:
#        contig = species.get_contig(wildcards.chrms)
#        seq_len = contig.recombination_map.sequence_length
#        neu_prop = 0.3
#        nonneu_prop = 0.7

#        ts = tskit.load(input[0])
#        index = int(wildcards.ids)
#        sizes = np.cumsum(num_samples_per_population)
#        if index != 0: samps = ts.samples()[sizes[index-1]:sizes[index]]
#        else: samps = ts.samples()[:sizes[index]]

#        ts2fs.generate_fs(ts, samps, seq_len, neu_prop, nonneu_prop, output, format='dadi')

#rule dadi_infer_dm:
#    input: 
#        output_dir + "/dadi/{seeds}/{chrms}/pop{ids}/pop{ids}.neu.fs"
#    output:
#        output_dir + "/dadi/{seeds}/{chrms}/pop{ids}/pop{ids}.two_epoch.InferDM.opts.0"
#    threads: 8
#    resources: time_min=60, mem_mb=5000, cpus=8
#    shell:
#        "dadi-cli InferDM --fs {input} --model {demo_model} --p0 {demo_p0} --ubounds {demo_ubounds} --lbounds {demo_lbounds} --output-prefix {output_dir}/dadi/{wildcards.seeds}/{wildcards.chrms}/pop{wildcards.ids}/pop{wildcards.ids}.two_epoch --optimizations 100 --grids 300 400 500 --threads {threads}"

#rule dadi_bestfit_dm:
#    input: 
        #output_dir + "/dadi/{seeds}/{chrms}/pop{ids}/pop{ids}.two_epoch.InferDM.opts.0"
#        rules.dadi_infer_dm.output
#    output:
#        output_dir + "/dadi/{seeds}/{chrms}/pop{ids}/pop{ids}.two_epoch.InferDM.bestfits"
#    threads: 1
#    resources: time_min=60, mem_mb=5000, cpus=1
#    shell: 
#        "dadi-cli BestFit --input-prefix {output_dir}/dadi/{wildcards.seeds}/{wildcards.chrms}/pop{wildcards.ids}/pop{wildcards.ids}.two_epoch.InferDM --model {demo_model} --ubounds {demo_ubounds} --lbounds {demo_lbounds} --model {demo_model}"

#rule dadi_generate_cache:
#    input:
        #output_dir + "/dadi/{seeds}/{chrms}/pop{ids}/pop{ids}.two_epoch.InferDM.bestfits"
#        rules.dadi_bestfit_dm.output
#    output:
#        output_dir + "/dadi/{seeds}/{chrms}/pop{ids}/pop{ids}.two_epoch.spectra.bpkl"
#    threads: 8
#    resources: time_min=60, mem_mb=5000, cpus=8
#    params:
#        sample_size = 100
#    shell:
#        "dadi-cli GenerateCache --model two_epoch --demo-popt {input} --sample-size {params.sample_size} --output {output} --mp --grids 800 1000 1200 --gamma-pts 2000"

#rule dadi_infer_dfe:
#    input:
#        output_dir + "/dadi/{seeds}/{chrms}/pop{ids}/pop{ids}.nonneu.fs",
#        output_dir + "/dadi/{seeds}/{chrms}/pop{ids}/pop{ids}.two_epoch.spectra.bpkl",
#        output_dir + "/dadi/{seeds}/{chrms}/pop{ids}/pop{ids}.two_epoch.InferDM.bestfits"
#    output:
#        output_dir + "/dadi/{seeds}/{chrms}/pop{ids}/pop{ids}.two_epoch.gamma.InferDFE.opts.0"
#    threads: 8
#    resources: time_min=60, mem_mb=5000, cpus=8
#    shell:
#        "dadi-cli InferDFE --fs {input[0]} --cache1d {input[1]} --demo-popt {input[2]} --output-prefix {output_dir}/dadi/{wildcards.seeds}/{wildcards.chrms}/pop{wildcards.ids}/pop{wildcards.ids}.two_epoch.gamma --pdf1d {dfe_model} --p0 {dfe_p0} --ubounds {dfe_ubounds} --lbounds {dfe_lbounds} --ratio 2.31 --optimizations 1000 --threads {threads}"

#rule dadi_bestfit_dfe:
#    input:
        #output_dir + "/dadi/{seeds}/{chrms}/pop{ids}/pop{ids}.two_epoch.gamma.InferDFE.opts.0"
#        rules.dadi_infer_dfe.output
#    output:
#        output_dir + "/dadi/{seeds}/{chrms}/pop{ids}/pop{ids}.two_epoch.gamma.InferDFE.bestfits"
#    threads: 1
#    resources: time_min=60, mem_mb=5000, cpus=1
#    shell:
#        "dadi-cli BestFit --input-prefix {output_dir}/dadi/{wildcards.seeds}/{wildcards.chrms}/pop{wildcards.ids}/pop{wildcards.ids}.two_epoch.gamma.InferDFE --pdf gamma --ubounds {dfe_ubounds} --lbounds {dfe_lbounds} --model {demo_model}"

#rule combine_dadi_dfe_bestfits:
#    input:
#        pop0_res = expand(output_dir + "/dadi/{seeds}/{chrms}/pop0/pop0.two_epoch.gamma.InferDFE.bestfits", seeds=seed_array, chrms=chrm_list),
#        pop1_res = expand(output_dir + "/dadi/{seeds}/{chrms}/pop1/pop1.two_epoch.gamma.InferDFE.bestfits", seeds=seed_array, chrms=chrm_list),
#        pop2_res = expand(output_dir + "/dadi/{seeds}/{chrms}/pop2/pop2.two_epoch.gamma.InferDFE.bestfits", seeds=seed_array, chrms=chrm_list)
#    output:
#        expand(output_dir + "/dadi/{chrms}/pop{ids}.dadi.dfe.bestfits", chrms=chrm_list, ids=[0, 1, 2])
#    threads: 1
#    resources: time_min=60, mem_mb=5000, cpus=1
#    shell:
#        """
#        echo "#likelihood\tshape\tscale\ttheta" > {output[0]}
#        echo "#likelihood\tshape\tscale\ttheta" > {output[1]}
#        echo "#likelihood\tshape\tscale\ttheta" > {output[2]}
#        for l in {input.pop0_res}; do grep -v "#" $l > temp1; head -1 temp1 >> {output[0]}; done 
#        for l in {input.pop1_res}; do grep -v "#" $l > temp1; head -1 temp1 >> {output[1]}; done
#        for l in {input.pop2_res}; do grep -v "#" $l > temp1; head -1 temp1 >> {output[2]}; done
#        rm temp1
#        """

# ###############################################################################
# polyDFE
# ###############################################################################

rule generate_polydfe_fs:
    input:
        output_dir + "/simulated_data/{demog}/{dfes}/{annots}/{seeds}/sim_{chrms}.trees"
    output:
        output_dir + "/inference/{demog}/polyDFE/{dfes}/{annots}/{seeds}/{chrms}/pop{ids}/pop{ids}.polyDFE.fs"
    threads: 1
    resources: time_min=60, mem_mb=5000, cpus=1
    run:
        contig = species.get_contig(wildcards.chrms)
        seq_len = contig.recombination_map.sequence_length
        neu_prop = 0.3
        nonneu_prop = 0.7

        ts = tskit.load(input[0])
        index = int(wildcards.ids)
        # TODO add subsample below?
        samps = ts.samples(population=index)
        if len(samps) != 0:
            ts2fs.generate_fs(ts, samps, seq_len, neu_prop, nonneu_prop, output, format='polydfe')
        else:
            samps = ts.samples(population=0)
            ts2fs.generate_fs(ts, samps, seq_len, neu_prop, nonneu_prop, output, format='polydfe')

rule run_polydfe:
    input: 
        rules.generate_polydfe_fs.output
    output: 
        output_dir + "/inference/{demog}/polyDFE/{dfes}/{annots}/{seeds}/{chrms}/pop{ids}/pop{ids}.polyDFE.results"
    threads: 1
    resources: time_min=60, mem_mb=5000, cpus=1
    shell:
        poly_dfe_exec + " -d {input} -m C -i workflows/config/polyDFE/polyDFE_init_models.txt 1 -e > {output[0]}"

rule get_polydfe_bestfit:
    input:
        rules.run_polydfe.output
    output:
        output_dir + "/inference/{demog}/polyDFE/{dfes}/{annots}/{seeds}/{chrms}/pop{ids}/pop{ids}.polyDFE.bestfit"
    threads: 1
    resources: time_min=60, mem_mb=5000, cpus=1
    shell:
        """
        paste <(grep "Best joint likelihood" {output_dir}/inference/{wildcards.demog}/polyDFE/{wildcards.dfes}/{wildcards.annots}/{wildcards.seeds}/{wildcards.chrms}/pop{wildcards.ids}/pop{wildcards.ids}.polyDFE.results | awk '{{print $6}}') \
              <(grep eps_an {output_dir}/inference/{wildcards.demog}/polyDFE/{wildcards.dfes}/{wildcards.annots}/{wildcards.seeds}/{wildcards.chrms}/pop{wildcards.ids}/pop{wildcards.ids}.polyDFE.results -A 3 | tail -1 | awk 'BEGIN{{OFS="\t"}}{{print $2,$3}}') \
              <(grep eps_an {output_dir}/inference/{wildcards.demog}/polyDFE/{wildcards.dfes}/{wildcards.annots}/{wildcards.seeds}/{wildcards.chrms}/pop{wildcards.ids}/pop{wildcards.ids}.polyDFE.results -A 1 | tail -1 | awk '{{print $3}}') > {output}
        """

rule combine_polydfe_bestfits:
    input:
        pop0_res = output_dir + "/inference/{demog}/polyDFE/{dfe}/{annots}/{seeds}/{chrms}/pop0/pop0.polyDFE.bestfit",
        pop1_res = output_dir + "/inference/{demog}/polyDFE/{dfe}/{annots}/{seeds}/{chrms}/pop1/pop1.polyDFE.bestfit", 
        pop2_res = output_dir + "/inference/{demog}/polyDFE/{dfe}/{annots}/{seeds}/{chrms}/pop2/pop2.polyDFE.bestfit", 
   
    output:
        pop0_out = output_dir + "/inference/{demog}/polyDFE/{dfe}/{annots}/{seeds}/{chrms}/pop0.polyDFE.bestfits",
        pop1_out = output_dir + "/inference/{demog}/polyDFE/{dfe}/{annots}/{seeds}/{chrms}/pop1.polyDFE.bestfits",
        pop2_out = output_dir + "/inference/{demog}/polyDFE/{dfe}/{annots}/{seeds}/{chrms}/pop2.polyDFE.bestfits",

    threads: 1
    resources: time_min=60, mem_mb=5000, cpus=1
    shell:
        """
        cat {input.pop0_res} | sed '1i#likelihood\tS_d\tb\ttheta_bar' > {output.pop0_out}
        cat {input.pop1_res} | sed '1i#likelihood\tS_d\tb\ttheta_bar' > {output.pop1_out}
        cat {input.pop2_res} | sed '1i#likelihood\tS_d\tb\ttheta_bar' > {output.pop2_out}
        """

# ###############################################################################
# DFE-alpha
# ###############################################################################

#rule run_dfe_alpha:
#    input:
#        output_dir + "/dfe-alpha/{seeds}/{chrms}/pop{ids}/pop{ids}.dfe-alpha.neu.config",
#        output_dir + "/dfe-alpha/{seeds}/{chrms}/pop{ids}/pop{ids}.dfe-alpha.nonneu.config",
#        output_dir + "/dfe-alpha/{seeds}/{chrms}/pop{ids}/pop{ids}.dfe-alpha.fs"
#    output:
#        output_dir + "/dfe-alpha/{seeds}/{chrms}/pop{ids}/nonneu/est_dfe.out"
#    threads: 1
#    resources: time_min=60, mem_mb=5000, cpus=1
#    shell:
#        "est_dfe -c {input[0]}; est_dfe -c {input[1]}"

#rule plot_dfe_alpha_results

# ###############################################################################
# plots
# ###############################################################################


rule plot_results:
    input:
        #dadi_res = expand(output_dir + "/dadi/{chrms}/pop{ids}.dadi.dfe.bestfits", chrms=chrm_list, ids=[0, 1, 2]),
        polydfe_res = expand(output_dir + "/inference/{demog}/polyDFE/{dfes}/{annots}/{seeds}/{chrms}/pop{ids}.polyDFE.bestfits",
            demog=demo_model_id_list,
            seeds=seed_array,
            dfes=dfe_list,
            annots=annotation_list,
            chrms=chrm_list,
            ids=[0,1,2]
        )
    output:
        output_dir + "/plots/{demog}/{chrms}/{dfes}/{annots}/dfe.inference.benchmark.pdf"
    threads: 1
    resources: time_min=60, mem_mb=5000, cpus=1
    run:
        if wildcards.demog == 'Constant': 
            model = stdpopsim.PiecewiseConstantSize(species.population_size)
            mutation_rate = 1.29e-08
        else: 
            model = species.get_demographic_model(wildcards.demog)
            mutation_rate = model.mutation_rate

        contig = species.get_contig(wildcards.chrms)
        seq_len = contig.recombination_map.sequence_length
        plots.plot_all_dfe_results(mutation_rate, seq_len, input, output)
