"""
Snakefile for running DFE benchmark on stdpopsim.
"""

import numpy as np
import stdpopsim
import tskit
import dadi


# ###############################################################################
# GENERAL RULES & GLOBALS
# ###############################################################################


def HuberDFE():
    """
    Return neutral and negative MutationType()s representing a human DFE.
    Huber et al. (2017)
    """
    neutral = stdpopsim.ext.MutationType()
    gamma_shape = 0.19  # shape
    gamma_mean = -0.014  # expected value
    h = 0.5  # dominance coefficient
    negative = stdpopsim.ext.MutationType(
        dominance_coeff=h,
        distribution_type="g",  # gamma distribution
        distribution_args=[gamma_mean, gamma_shape],
    )
    # neutral mutations have 0 proportion because they are not simulated by SLiM
    return {"mutation_types": [neutral, negative], "proportions": [0.0, 0.7]}

nreps = np.arange(2)

sim_results_pattern = "sim_OutOfAfrica_3G09_HuberDFE_{rep}rep.trees"

sim_results = expand(sim_results_pattern, rep=nreps)

rule all:
    input:
        "p0.neu.fs",
        "p0.nonneu.fs"

#rule simulation:
#    input:
#    output:
#        sim_results_pattern
#    threads: 1
#    run:
#        species = stdpopsim.get_species("HomSap")
#        model = species.get_demographic_model("OutOfAfrica_3G09")
#        contig = species.get_contig("chr1", length_multiplier=0.001)
#        contig.clear_genomic_mutation_types()
#        samples = model.get_samples(100, 100, 100)  # YRI, CEU, CHB
#        contig.add_genomic_element_type(
#            intervals=np.array([[0, int(contig.recombination_map.sequence_length)]]),
#            **HuberDFE(),
#        )
#        contig.mutation_rate = 2.35e-8
#        engine = stdpopsim.get_engine("slim")
#        ts = engine.simulate(
#            model,
#            contig,
#            samples,
#            seed=123,
#            slim_scaling_factor=1,
#            slim_burn_in=10,
#        )
#        ts.dump(output[0])

rule slim_simulation:
    input:
        "Hum_OutOfAfrica3G09_HuberDFE.late.slim.txt"
    output:
        "p0.late.slimout",
        "p1.late.slimout",
        "p2.late.slimout"
    threads: 1
    shell:
        "slim -d SEQSIZE=248956 {input}"

rule generate_fs:
    input:
        rules.slim_simulation.output
    output:
        "p0.neu.fs", "p0.nonneu.fs"
    threads: 1
    run:
        dd_syn, ns = dadi.Misc.dd_from_SLiM_files(input, mut_types=['m0'])
        dd_non, ns = dadi.Misc.dd_from_SLiM_files(input, mut_types=['m1'])
        popids = range(len(ns))
        fs_syn = dadi.Spectrum.from_data_dict(dd_syn, popids, ns)
        fs_non = dadi.Spectrum.from_data_dict(dd_non, popids, ns)
        fs_syn.marginalize([1,2]).to_file(output[0])
        fs_non.marginalize([1,2]).to_file(output[1])

# ###############################################################################
# dadi
# ###############################################################################


# ###############################################################################
# polyDFE
# ###############################################################################


#rule generate_polydfe_fs

#rule run_polydfe

#rule plot_polydfe_results


# ###############################################################################
# DFE-alpha
# ###############################################################################


#rule generate_dfe_alpha_fs

#rule run_dfe_alpha

#rule plot_dfe_alpha_results
