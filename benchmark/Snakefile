"""
Snakefile for running DFE benchmark on stdpopsim.
"""

import numpy as np
import stdpopsim
import tskit
import dadi


# ###############################################################################
# GENERAL RULES & GLOBALS
# ###############################################################################


#def HuberDFE():
#    """
#    Return neutral and negative MutationType()s representing a human DFE.
#    Huber et al. (2017)
#    """
#    neutral = stdpopsim.ext.MutationType()
#    gamma_shape = 0.19  # shape
#    gamma_mean = -0.014  # expected value
#    h = 0.5  # dominance coefficient
#    negative = stdpopsim.ext.MutationType(
#        dominance_coeff=h,
#        distribution_type="g",  # gamma distribution
#        distribution_args=[gamma_mean, gamma_shape],
#    )
    # neutral mutations have 0 proportion because they are not simulated by SLiM
#    return {"mutation_types": [neutral, negative], "proportions": [0.0, 0.7]}

#nreps = np.arange(2)

#sim_results_pattern = "sim_OutOfAfrica_3G09_HuberDFE_{rep}rep.trees"

#sim_results = expand(sim_results_pattern, rep=nreps)

rule all:
    input:
#        "results/dadi/pop0.two_epoch_1d.gamma.mut.prop.pdf"
         "results/polydfe/pop0.polydfe.fs"

#rule simulation:
#    input:
#    output:
#        sim_results_pattern
#    threads: 1
#    run:
#        species = stdpopsim.get_species("HomSap")
#        model = species.get_demographic_model("OutOfAfrica_3G09")
#        contig = species.get_contig("chr1", length_multiplier=0.001)
#        contig.clear_genomic_mutation_types()
#        samples = model.get_samples(100, 100, 100)  # YRI, CEU, CHB
#        contig.add_genomic_element_type(
#            intervals=np.array([[0, int(contig.recombination_map.sequence_length)]]),
#            **HuberDFE(),
#        )
#        contig.mutation_rate = 2.35e-8
#        engine = stdpopsim.get_engine("slim")
#        ts = engine.simulate(
#            model,
#            contig,
#            samples,
#            seed=123,
#            slim_scaling_factor=1,
#            slim_burn_in=10,
#        )
#        ts.dump(output[0])

rule slim_simulation:
    input:
        "Hum_OutOfAfrica3G09_HuberDFE.late.slim.txt"
    output:
        "p0.late.slimout",
        "p1.late.slimout",
        "p2.late.slimout"
    threads: 1
    shell:
        "slim -d SEQSIZE=248956 {input}"

rule generate_fs:
    input:
        rules.slim_simulation.output
    output:
        "results/dadi/pop0.neu.fs", 
        "results/dadi/pop0.nonneu.fs"
    threads: 1
    run:
        dd_syn, ns = dadi.Misc.dd_from_SLiM_files(input, mut_types=['m0'])
        dd_non, ns = dadi.Misc.dd_from_SLiM_files(input, mut_types=['m1'])
        popids = range(len(ns))
        fs_syn = dadi.Spectrum.from_data_dict(dd_syn, popids, ns)
        fs_non = dadi.Spectrum.from_data_dict(dd_non, popids, ns)
        fs_syn.marginalize([1,2]).to_file(output[0])
        fs_non.marginalize([1,2]).to_file(output[1])

# ###############################################################################
# dadi
# ###############################################################################

demo_model = 'two_epoch_1d'
demo_p0 = '5 5'
demo_lbounds = '10e-3 10e-3' 
demo_ubounds = '10 1'
dfe_model = 'gamma'
dfe_p0 = '0.5 1000'
dfe_lbounds = '0 0'
dfe_ubounds = '1 50000'

rule dadi_infer_dm:
    input: 
        "results/dadi/pop0.neu.fs"
    output:
        "results/dadi/pop0.two_epoch_1d.InferDM.opts.0"
    threads: 8
    shell:
        "dadi-cli InferDM --fs {input} --model {demo_model} --p0 {demo_p0} --ubounds {demo_ubounds} --lbounds {demo_lbounds} --output-prefix results/dadi/pop0.two_epoch_1d --thread 100 --grids 300 400 500"

rule dadi_bestfit_dm:
    input: rules.dadi_infer_dm.output
    output:
        "results/dadi/pop0.two_epoch_1d.InferDM.bestfits"
    threads: 1
    shell: 
        "dadi-cli BestFit --input-prefix results/dadi/pop0.two_epoch_1d.InferDM --model {demo_model} --ubounds {demo_ubounds} --lbounds {demo_lbounds}"

rule dadi_generate_cache:
    input: rules.dadi_bestfit_dm.output
    output:
        "results/dadi/pop0.two_epoch.sel.spectra.bpkl"
    threads: 8
    shell:
        "dadi-cli GenerateCache --model two_epoch --demo-popt {input} --sample-size 100 --output {output} --mp --grids 800 1000 1200 --gamma-pts 500"

rule dadi_infer_dfe:
    input:
        "results/dadi/pop0.nonneu.fs",
        "results/dadi/pop0.two_epoch.sel.spectra.bpkl",
        "results/dadi/pop0.two_epoch_1d.InferDM.bestfits"
    output:
        "results/dadi/pop0.two_epoch_1d.gamma.InferDFE.opts.0"
    threads: 8
    shell:
        "dadi-cli InferDFE --fs {input[0]} --cache1d {input[1]} --demo-popt {input[2]} --output-prefix results/dadi/pop0.two_epoch_1d.gamma --pdf1d {dfe_model} --p0 {dfe_p0} --ubounds {dfe_ubounds} --lbounds {dfe_lbounds} --ratio 2.31 --thread 100"

rule dadi_bestfit_dfe:
    input: rules.dadi_infer_dfe.output
    output:
        "results/dadi/pop0.two_epoch_1d.gamma.InferDFE.bestfits"
    threads: 1
    shell:
        "dadi-cli BestFit --input-prefix results/dadi/pop0.two_epoch_1d.gamma.InferDFE --pdf gamma --ubounds {dfe_ubounds} --lbounds {dfe_lbounds}"

rule dadi_plot_results:
    input: rules.dadi_bestfit_dfe.output
    output:
        "results/dadi/pop0.two_epoch_1d.gamma.mut.prop.pdf"
    threads: 1
    shell:
        "dadi-cli Plot --dfe-popt {input} --pdf1d gamma --output {output} --mut-rate 2.35e-8 --seq-len 248956 --ratio 2.31"

# ###############################################################################
# polyDFE
# ###############################################################################


rule generate_polydfe_fs:
    input:
        "results/dadi/pop0.neu.fs",
        "results/dadi/pop0.nonneu.fs"
    output:
        "results/polydfe/pop0.polydfe.fs"
    threads: 1
    run:
        neu_fs = dadi.Spectrum.from_file(input[0]).project([20])
        nonneu_fs = dadi.Spectrum.from_file(input[1]).project([20])
        neu_len = round(248956 * 0.3)
        nonneu_len = round(248956 * 0.7)
        with open(output[0], 'w') as o:
            o.write("1 1 20\n")
            o.write(" ".join([str(round(f)) for f in neu_fs[1:-1]]) + " " + str(neu_len) + "\n")
            o.write(" ".join([str(round(f)) for f in nonneu_fs[1:-1]]) + " " + str(nonneu_len) + "\n")


#rule run_polydfe

#rule plot_polydfe_results


# ###############################################################################
# DFE-alpha
# ###############################################################################


#rule generate_dfe_alpha_fs

#rule run_dfe_alpha

#rule plot_dfe_alpha_results
