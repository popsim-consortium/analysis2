"""
Snakefile for running DFE benchmark on stdpopsim.
"""

import os
import numpy as np
import stdpopsim
import tskit
import dadi

configfile: "config/snakemake/config.yml"

np.random.seed(config["seed"])

# ###############################################################################
# GENERAL RULES & GLOBALS
# ###############################################################################


# The number of replicates of each analysis you would like to run
replicates = config["replicates"]

# Where you would like all output files from analysis to live
output_dir = os.path.abspath(config["output_dir"])

# The analysis species
species = stdpopsim.get_species(config["species"])

# The specific model you would like to run
model = species.get_demographic_model(config["model"])

# The number of samples to simulate for within each population
num_samples_per_population = config["num_samples_per_population"]

# The names of all chromosomes to simulate, separated by commas
# Use "all" to simulate all chromsomes for the genome
chrm_list = [chrom.id for chrom in species.genome.chromosomes]
if "chrY" in chrm_list:
    chrm_list.remove("chrY")
if(config["chrm_list"] != "all"):
    chrm_list = [chr for chr in config["chrm_list"].split(",")]

seed_array = np.random.random_integers(1,2**31,replicates)

def HuberDFE():
    """
    Return neutral and negative MutationType()s representing a human DFE.
    Huber et al. (2017)
    """
    neutral = stdpopsim.ext.MutationType()
    gamma_shape = 0.19  # shape
    gamma_mean = -0.014  # expected value
    h = 0.5  # dominance coefficient
    negative = stdpopsim.ext.MutationType(
        dominance_coeff=h,
        distribution_type="g",  # gamma distribution
        distribution_args=[gamma_mean, gamma_shape],
    )
    # neutral mutations have 0 proportion because they are not simulated by SLiM
    return {"mutation_types": [neutral, negative], "proportions": [0.0, 0.7]}

def allele_counts(ts, sample_sets=None):
    if sample_sets is None:
        sample_sets = [ts.samples()]
    def f(x):
        return x
    return ts.sample_count_stat(sample_sets, f, len(sample_sets),
              span_normalise=False, windows='sites',
              polarised=True, mode='site', strict=False)

## Run only the simulations!
rule all:
    input: expand(output_dir + "/simulated_data/{seeds}/sim_OutOfAfrica_3G09_HuberDFE_{chrms}.trees", seeds=seed_array, chrms=chrm_list) 

#rule all:
#    input:
#        sim_results
#        "results/dadi/pop0.two_epoch_1d.gamma.mut.prop.pdf",
#        "results/polyDFE/pop0.polyDFE.results",
#        "results/dfe-alpha/nonneu/est_dfe.out",
#        "results/anavar/pop0.anavar.ctl.txt",
#        "results/anavar/pop0.anavar.results",
        #"results/anavar/pop0.anavar.log",

rule simulation:
    input:
    output:
        output_dir + "/simulated_data/{seeds}/sim_OutOfAfrica_3G09_HuberDFE_{chrms}.trees"
    threads: 1
    run:
        contig = species.get_contig(wildcards.chrms, length_multiplier=0.001)
        contig.clear_genomic_mutation_types()
        samples = model.get_samples(*num_samples_per_population)  # YRI, CEU, CHB
        contig.add_genomic_element_type(
            intervals=np.array([[0, int(contig.recombination_map.sequence_length)]]),
            **HuberDFE(),
        )
        contig.mutation_rate = 2.35e-8
        engine = stdpopsim.get_engine("slim")
        ts = engine.simulate(
            model,
            contig,
            samples,
            slim_scaling_factor=10,
            slim_burn_in=10,
            seed=wildcards.seeds,
        )
        ts.dump(output[0])

rule generate_fs:
    input:
        rules.simulation.output
    output:
        "results/dadi/pop0.neu.fs", 
        "results/dadi/pop0.nonneu.fs",
        "results/polyDFE/pop0.polyDFE.fs",
        "results/dfe-alpha/pop0.dfe-alpha.fs",
        "results/anavar/pop0.anavar.ctl.txt"
    threads: 1
    run:
        ts = tskit.load(input[0])
        samps = ts.samples()[0:100]
        mut_type = np.zeros(ts.num_sites)
        for j, s in enumerate(ts.sites()):
            mt = []
            for m in s.mutations:
                for md in m.metadata["mutation_list"]:
                    mt.append(md["mutation_type"])
            if len(set(mt)) > 1:
                mut_type[j] = 3
            else:
                mut_type[j] = mt[0]

        freqs = allele_counts(ts, [samps])
        freqs = freqs.flatten().astype(int)
        mut_afs = np.zeros((len(samps)+1, 3), dtype='int64')
        for k in range(3):
            mut_afs[:, k] = np.bincount(freqs[mut_type == k+1], minlength=len(samps) + 1)

        # For dadi
        nonneu_fs = dadi.Spectrum(mut_afs[:,0])
        neu_fs = dadi.Spectrum(mut_afs[:,1])

        neu_fs.to_file(output[0])
        nonneu_fs.to_file(output[1])

        # For polyDFE
        # Project down to 20 chromosomes
        # See https://github.com/paula-tataru/polyDFE/issues/3
        neu_fs_proj = neu_fs.project([20])
        nonneu_fs_proj = nonneu_fs.project([20])
        neu_len = round(248956 * 0.3)
        nonneu_len = round(248956 * 0.7)
        with open(output[2], 'w') as o:
            o.write("1 1 20\n")
            o.write(" ".join([str(round(f)) for f in neu_fs_proj[1:-1]]) + " " + str(neu_len) + "\n")
            o.write(" ".join([str(round(f)) for f in nonneu_fs_proj[1:-1]]) + " " + str(nonneu_len) + "\n")

        # For DFE-alpha
        with open(output[3], 'w') as o:
            o.write("1\n")
            o.write(str(len(neu_fs)-1)+"\n")
            o.write(" ".join([str(round(f)) for f in nonneu_fs.data]) + "\n")
            o.write(" ".join([str(round(f)) for f in neu_fs.data]) + "\n")

        # For anavar
        anavar_alg_cmd = [
            '[algorithm_commands]',
            'search_algorithm: NLOPT_LD_SLSQP',
            'maxeval: 100000',
            'maxtime: 600',
            'num_searches: 100',
            'nnoimp: 2',
            'maximp: 3',
            'optional: false'
        ]
        anavar_mdl_cmd = [
            '[model_commands]',
            'model: SNP_1',
            'n: ' + str(nonneu_fs.sample_sizes[0]),
            'm: 248956',
            'folded: false',
            'sfs: ' + ", ".join([str(round(f)) for f in nonneu_fs.data[1:-1]]),
            'dfe: continuous',
            'distribution: reflected_gamma',
            'theta_range: 0.1, 1000',
            'shape_range: 0.1, 100',
            'scale_range: 0.1, 100',
            'e_range: 0, 1',
            'constraint: no_pol_error',
            'optional: false'
        ]

        with open(output[4], 'w') as o:
            o.write("\n".join(anavar_alg_cmd)+"\n\n\n")
            o.write("\n".join(anavar_mdl_cmd)+"\n")


# ###############################################################################
# dadi
# ###############################################################################

demo_model = 'two_epoch'
demo_p0 = '5 5'
demo_lbounds = '10e-3 10e-3' 
demo_ubounds = '10 1'
dfe_model = 'gamma'
dfe_p0 = '0.5 1000'
dfe_lbounds = '0 0'
dfe_ubounds = '1 50000'

rule dadi_infer_dm:
    input: 
        "results/dadi/pop0.neu.fs"
    output:
        "results/dadi/pop0.two_epoch_1d.InferDM.opts.0"
    threads: 8
    shell:
        "dadi-cli InferDM --fs {input} --model {demo_model} --p0 {demo_p0} --ubounds {demo_ubounds} --lbounds {demo_lbounds} --output-prefix results/dadi/pop0.two_epoch_1d --thread 100 --grids 300 400 500"

rule dadi_bestfit_dm:
    input: rules.dadi_infer_dm.output
    output:
        "results/dadi/pop0.two_epoch_1d.InferDM.bestfits"
    threads: 1
    shell: 
        "dadi-cli BestFit --input-prefix results/dadi/pop0.two_epoch_1d.InferDM --model {demo_model} --ubounds {demo_ubounds} --lbounds {demo_lbounds}"

rule dadi_generate_cache:
    input: rules.dadi_bestfit_dm.output
    output:
        "results/dadi/pop0.two_epoch.sel.spectra.bpkl"
    threads: 8
    shell:
        "dadi-cli GenerateCache --model two_epoch --demo-popt {input} --sample-size 100 --output {output} --mp --grids 800 1000 1200 --gamma-pts 500"

rule dadi_infer_dfe:
    input:
        "results/dadi/pop0.nonneu.fs",
        "results/dadi/pop0.two_epoch.sel.spectra.bpkl",
        "results/dadi/pop0.two_epoch_1d.InferDM.bestfits"
    output:
        "results/dadi/pop0.two_epoch_1d.gamma.InferDFE.opts.0"
    threads: 8
    shell:
        "dadi-cli InferDFE --fs {input[0]} --cache1d {input[1]} --demo-popt {input[2]} --output-prefix results/dadi/pop0.two_epoch_1d.gamma --pdf1d {dfe_model} --p0 {dfe_p0} --ubounds {dfe_ubounds} --lbounds {dfe_lbounds} --ratio 2.31 --thread 100"

rule dadi_bestfit_dfe:
    input: rules.dadi_infer_dfe.output
    output:
        "results/dadi/pop0.two_epoch_1d.gamma.InferDFE.bestfits"
    threads: 1
    shell:
        "dadi-cli BestFit --input-prefix results/dadi/pop0.two_epoch_1d.gamma.InferDFE --pdf gamma --ubounds {dfe_ubounds} --lbounds {dfe_lbounds}"

rule dadi_plot_results:
    input: rules.dadi_bestfit_dfe.output
    output:
        "results/dadi/pop0.two_epoch_1d.gamma.mut.prop.pdf"
    threads: 1
    shell:
        "dadi-cli Plot --dfe-popt {input} --pdf1d gamma --output {output} --mut-rate 2.35e-8 --seq-len 248956 --ratio 2.31"

# ###############################################################################
# polyDFE
# ###############################################################################

rule run_polydfe:
    input: "results/polyDFE/pop0.polyDFE.fs"
    output: 
        "results/polyDFE/pop0.polyDFE.results"
    threads: 1
    shell:
        "./polyDFE-2.0-linux-64-bit -d results/polyDFE/pop0.polyDFE.fs -m C -i config/polyDFE/polyDFE_init_models.txt 1 -e > {output[0]}"

#rule plot_polydfe_results

# ###############################################################################
# DFE-alpha
# ###############################################################################

rule run_dfe_alpha:
    input:
        "config/dfe-alpha/dfe-alpha.neu.config",
        "config/dfe-alpha/dfe-alpha.nonneu.config",
        "results/dfe-alpha/pop0.dfe-alpha.fs"
    output: "results/dfe-alpha/nonneu/est_dfe.out"
    threads: 1
    shell:
        "est_dfe -c {input[0]}; est_dfe -c {input[1]}"

#rule plot_dfe_alpha_results

# ###############################################################################
# anavar
# ###############################################################################

rule run_anavar:
    input:
        "results/anavar/pop0.anavar.ctl.txt"
    output:
        "results/anavar/pop0.anavar.results",
        "results/anavar/pop0.anavar.log"
    threads: 1
    shell:
        "anavar {input[0]} {output[0]} {output[1]}"


# ###############################################################################
# prfreq
# ###############################################################################

#rule run_prfreq:
#    input:
#    output:
#    threads: 1
#    shell:
